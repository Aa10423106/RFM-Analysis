import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from IPython.display import display
import numpy as np
import plotly.graph_objects as go
import seaborn as sns
import plotly.io as pio
import plotly.offline as py
data = pd.read_excel("sample_-_superstore.xlsx")#讀取excel
# display(data['Customer ID'])
# display("----------------------------------------------------")
data['Order Date'] = pd.to_datetime(data['Order Date'])#將 'Order Date' 欄位轉換為日期型別，以便進行日期篩選
start_date = pd.to_datetime('2016-04-01')
end_date = pd.to_datetime('2016-06-30')
# print("資料欄位",data.columns)
filtered_df = data[(data['Order Date'] >= start_date) & (data['Order Date'] <= end_date)]#從訂單清單選出特定時間的資料

customer_recency = filtered_df.groupby('Customer ID')['Order Date'].min()#用min函式找出最小的日期，找出客戶id中最小的日期

today = pd.to_datetime('2016-07-01')#這裡我們以2016-07-01減去每個客戶的購買日期
display(customer_recency)

customer_recency = (today - customer_recency).dt.days#計算每個顧客最近一次購買的時間間隔
# customer_recency_1 = customer_recency.sort_values(ascending=False).tail(20) #
customer_Frequency = filtered_df['Customer ID'].value_counts()#計算每個客戶一段時間的購買次數
customer_Monetary_Value = filtered_df.groupby('Customer ID')['Sales'].sum()
# top_100_products = customer_Frequency .sort_values(ascending=False).head(50)

filtered_df1 = filtered_df.copy()#建立一個資料的副本，然後對副本進行操作
filtered_df1 = filtered_df.drop_duplicates(subset='Customer ID')
#上面的程式碼是DataFrame 中根據 'Customer ID' 列的值進行去重操作，將重複的行從 DataFrame 中刪除，並將結果存儲在新的 DataFrame filtered_df1 中。
filtered_df1.loc[:,'R'] = filtered_df1['Customer ID'].map(customer_recency).fillna(0)#使用.loc 前後都加上 [:, ] 表示對整個 DataFrame 進行操作
filtered_df1.loc[:,'F'] = filtered_df1['Customer ID'].map(customer_Frequency).fillna(0)
filtered_df1.loc[:,'M'] = filtered_df1['Customer ID'].map(customer_Monetary_Value).fillna(0)

display(filtered_df1[['Customer ID','R','F','M']])

r_bins = [0, 19, 38, 57, 76, 95]
r_labels = ['5', '4', '3', '2', '1']
filtered_df1.loc[:,'R']= pd.cut(filtered_df1['R'], bins=r_bins, labels=r_labels)
filtered_df1.loc[:,'R']= filtered_df1['R'].astype(int)

f_bins = [0, 2, 4, 6, 8, 10]
f_labels = ['1', '2', '3', '4', '5']
filtered_df1.loc[:,'F']= pd.cut(filtered_df1['F'], bins=f_bins, labels=f_labels)
filtered_df1.loc[:,'F'] = filtered_df1['F'].astype(int)

m_bins = [0, 500, 1500,2000, 8000, 10000]
m_labels = ['1', '2', '3', '4', '5']
filtered_df1.loc[:, 'M'] = pd.cut(filtered_df1['M'], bins=m_bins, labels=m_labels)
filtered_df1.loc[:, 'M'] = filtered_df1['M'].astype(int)

#最近一次的消費人數直條圖
recency_table = filtered_df1.groupby('F')['Customer ID'].count().reset_index()
y1 = ['0-2次', '3-4次', '5-6次', '7-8次', '9-10次']
# 使用 plotly.graph_objects 建立長條圖
fig = go.Figure(data=[
    go.Bar(x=y1, y=recency_table['Customer ID'], text=recency_table['Customer ID'],
           texttemplate='%{text}人', textposition='outside')
])

fig.update_layout(
    title="消費頻率與顧客數量分佈圖",
    xaxis_title="消費頻率",
    yaxis_title="顧客數量",
    font=dict(
        size=18
    )
)

py.plot(fig, filename='消費頻率與顧客數量分佈圖.html')

#消費頻率與顧客數量分佈圖
recency_table = filtered_df1.groupby('R')['Customer ID'].count().reset_index()
y1 = ['0-19 day', '20-38 day', '39-57 day', '58-76 day', '77-95 day']
# 使用 plotly.graph_objects 建立長條圖
fig = go.Figure(data=[
    go.Bar(x=y1, y=recency_table['Customer ID'], text=recency_table['Customer ID'],
           texttemplate='%{text}人', textposition='outside')
])

fig.update_layout(
    title="最近一次（天）的消費與顧客數量分佈圖",
    xaxis_title="距離上次購買的天數",
    yaxis_title="顧客數量",
    font=dict(
        size=18
    )
)
py.plot(fig, filename='最近一次（天）的消費與顧客數量分佈圖.html')

#銷售金額與顧客數量分佈圖
recency_table = filtered_df1.groupby('M')['Customer ID'].count().reset_index()
y1 = ['0-500', '501-1500', '1501-2000', '2001-8000', '8001-10000']
# 使用 plotly.graph_objects 建立長條圖
fig = go.Figure(data=[
    go.Bar(x=y1, y=recency_table['Customer ID'], text=recency_table['Customer ID'],
           texttemplate='%{text}人', textposition='outside')
])

fig.update_layout(
    title="銷售金額與顧客人數分佈圖",
    xaxis_title="銷售金額(USD)",
    yaxis_title="顧客數量",
    font=dict(
        size=18
    )
)
py.plot(fig, filename='銷售金額與顧客人數分佈圖.html')

customer_recency_median = filtered_df1['R'].median()#計算中位數
customer_Frequency_median  = filtered_df1['F'].median()
customer_Monetary_Value_median = filtered_df1['M'].median()

filtered_df1.loc[:,'R'] = np.where(filtered_df1['R']>customer_recency_median,'高','低')#按平均值在每个指标下划分价值高低：
filtered_df1.loc[:,'F'] = np.where(filtered_df1['F']>customer_Frequency_median,'高','低')
filtered_df1.loc[:,'M'] = np.where(filtered_df1['M']>customer_Monetary_Value_median,'高','低')
filtered_df1['RFM']=filtered_df1['R']+filtered_df1['F']+filtered_df1['M']


def RFMModel(x):
 if x=='高高高':
        return '重要價值客户'
 elif x=='高低高':
        return '重要發展客户'
 elif x=='低高高':
        return '重要保持客户'
 elif x=='低低高':
        return '重要挽留客户'
 elif x=='高高低':
        return '一般價值客户'
 elif x=='高低低':
        return '一般發展客户'
 elif x=='低高低':
        return '一般保持客户'
 else:
        return '一般挽留客户'  

filtered_df1.loc[:,'客戶等級']=filtered_df1['RFM'].apply(RFMModel)
filtered_df1.to_excel('客戶分級.xlsx', index=False)
display(filtered_df1)
a = filtered_df1.groupby('客戶等級')['Sales'].sum()
display(a)



# 建立長條圖
fig = go.Figure(data=[
    go.Bar(x=a.index, y=a, text=a, texttemplate='%{text:.2f}', textposition='auto')
])

# 設置圖表標題和軸標籤
fig.update_layout(
    title="客戶等級與銷售額分佈圖",
    xaxis_title="客戶等級",
    yaxis_title="銷售額(USD)",
    font=dict(
        size=18
    )
)

# 生成互動式的HTML圖表
py.plot(fig, filename='客戶等級與銷售額分佈圖.html')

fig = go.Figure(data=[go.Pie(labels=a.index, values=a)])

# 設置圖表標題
fig.update_layout(
    title="客戶等級銷售額佔比",
    font=dict(
        size=18
    )
)

# 生成互動式的HTML圖表
py.plot(fig, filename='客戶等級銷售額佔比.html')
